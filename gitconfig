# To utilize this file without copying or symlinking to ~/.gitconfig, use:
# [include]
#     path = path/to/yak-setup/.gitconfig
[user]
    email = they4kman@gmail.com
    name = Zach \"theY4Kman\" Kanzler
[gui]
    color = true
[color]
    ui = auto
[alias]
    co = checkout
    ci = commit
    unstash = stash pop
    us = stash pop
    s = stash
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    wip = commit -m "WIP**************************************************************************************"
    rollback = reset --soft HEAD^
    alias = config --get-regexp ^alias\\.
    amend = commit --amend --no-edit

    # Clone, then cd into the directory
    #clonecd = "!f() { OUTPUT=$(git clone \"$@\"); REPO=$(echo \"$OUTPUT\" | grep 'Cloning into' | sed \"s/Cloning into '\(.*\)'.../\\1/\"); [ -n \"$REPO\" ] && cd \"$REPO\"; }; f"
    #clonecd = "!f() { REMOTE=\"$1\"; REPO=$(echo \"$REMOTE\" | sed 's/.*[:/]\\([^:/]*\\)\(\\.git\\)*$/\\1/'); git clone \"$@\" || return $?; cd \"$REPO\"; }; f"
    #clonecd = "!f() { REMOTE=\"$1\"; REPO=$(echo \"$REMOTE\" ); echo \"$REPO\"; }; f"
    clonecd = "!f() { OUTPUT=$(\"$_\" clone --progress \"$@\" 2>&1 | tee /dev/tty); REPO=$(echo \"$OUTPUT\" | sed -n \"s/^Cloning into '\\([^']\\+\\)'...$/\\1/p\"); [ -n \"$REPO\" ] && cd \"$REPO\"; }; f"

    # Drunk aliases
    pus = push
    psuh = push
    ush = push
    rest = reset

    # hub CLI aliases
    prco = pr checkout
    prs = pr list --format='%pC%>(8)%I%Creset  %t%  l%n'

    # Source: https://stackoverflow.com/a/25095062/148585
    recent = git-recent

    ###
    # Interactive selection menu for recent branches; press Enter to checkout
    #
    # Requires: https://github.com/p-gen/smenu
    #
    reco = "!f() { BRANCH=$(git recent -n ${1:-100} | smenu -l -n10); [ -n \"$BRANCH\" ] && echo && git checkout \"$BRANCH\"; }; f"

    # Source: https://csswizardry.com/2017/05/little-things-i-like-to-do-with-git/
    stats = shortlog -sn
    praise = blame
    recent = "!f() { git for-each-ref --count=\"${2+10}\" --sort=-committerdate refs/heads/ --format=\"%(refname:short)\"; } f"
    overview-all = log --all --oneline --no-merges
    overview = log --all --since='2 weeks' --oneline --no-merges
    recap = log --all --oneline --no-merges --author="^(zach|z|they4kman)@.*"
    today = recap --since=00:00:00
    graph = log --graph --all --decorate --stat --date=iso

    # Ignoring files
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[[:lower:]]"
    exclude = "!f() { printf '\n\n%s\n%s\n' \"# git excluded $(date)\" \"$(realpath --relative-to=\"$(git rev-parse --show-toplevel)\" \"${GIT_PREFIX:-.}/$@\")\" | tee -a \".git/info/exclude\" > /dev/null; }; f"

[push]
    default = simple
[core]
    attributesfile = gitattributes
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"
[url "git@heroku.com:"]
    insteadOf = "heroku:"
